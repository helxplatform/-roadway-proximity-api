# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class RoadwayData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, type: str=None, latitude: float=None, longitude: float=None, distance: float=None):  # noqa: E501
        """RoadwayData - a model defined in Swagger

        :param name: The name of this RoadwayData.  # noqa: E501
        :type name: str
        :param type: The type of this RoadwayData.  # noqa: E501
        :type type: str
        :param latitude: The latitude of this RoadwayData.  # noqa: E501
        :type latitude: float
        :param longitude: The longitude of this RoadwayData.  # noqa: E501
        :type longitude: float
        :param distance: The distance of this RoadwayData.  # noqa: E501
        :type distance: float
        """
        self.swagger_types = {
            'name': str,
            'type': str,
            'latitude': float,
            'longitude': float,
            'distance': float
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'distance': 'distance'
        }

        self._name = name
        self._type = type
        self._latitude = latitude
        self._longitude = longitude
        self._distance = distance

    @classmethod
    def from_dict(cls, dikt) -> 'RoadwayData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RoadwayData of this RoadwayData.  # noqa: E501
        :rtype: RoadwayData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this RoadwayData.


        :return: The name of this RoadwayData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this RoadwayData.


        :param name: The name of this RoadwayData.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self) -> str:
        """Gets the type of this RoadwayData.


        :return: The type of this RoadwayData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this RoadwayData.


        :param type: The type of this RoadwayData.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def latitude(self) -> float:
        """Gets the latitude of this RoadwayData.


        :return: The latitude of this RoadwayData.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude: float):
        """Sets the latitude of this RoadwayData.


        :param latitude: The latitude of this RoadwayData.
        :type latitude: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")  # noqa: E501

        self._latitude = latitude

    @property
    def longitude(self) -> float:
        """Gets the longitude of this RoadwayData.


        :return: The longitude of this RoadwayData.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude: float):
        """Sets the longitude of this RoadwayData.


        :param longitude: The longitude of this RoadwayData.
        :type longitude: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")  # noqa: E501

        self._longitude = longitude

    @property
    def distance(self) -> float:
        """Gets the distance of this RoadwayData.


        :return: The distance of this RoadwayData.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance: float):
        """Sets the distance of this RoadwayData.


        :param distance: The distance of this RoadwayData.
        :type distance: float
        """
        if distance is None:
            raise ValueError("Invalid value for `distance`, must not be `None`")  # noqa: E501

        self._distance = distance
